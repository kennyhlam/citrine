#!/usr/bin/env python
# -*- coding: utf-8 -*-

import math

mult_div = '/*'
l_paren = '('
r_paren = ')'
def parse(units):
    '''
        Input:
            (str) units - which is a string representing units (may be
                multipled, divided, or have parenthesis)

        Returns an array representing the expression of the units
        If there exist parenthesis, each set of parens nests
        another array representing the enclosed expression.

        ex.     'a/b'   => ['a', '/', 'b']
            'a/(b*c)    => ['a', '/', ['b', '*', 'c']]
    '''
    expr_array = []
    unit = ''
    idx = 0

    while idx < len(units):
        ch = units[idx]

        # ran across a parenthetical expression
        # grab the entire paren expr and recurse
        # move index by the paren expr length + 2 (left and right parens each add one)
        if ch == l_paren:
            parend_expr = units[idx+1:].partition(r_paren)[0]
            sub_expr = parse(parend_expr)
            expr_array.append(sub_expr)
            idx += len(parend_expr) + 2
        
        # ran across multiplcation or division
        # end the previous unit if it existed, add in this operation, start blank unit
        elif ch in mult_div:
            if len(unit) > 0:
                expr_array.append(unit)
            expr_array.append(ch)
            unit = ''
            idx += 1
        
        # part of some character string representing a unit
        # just continue to next character
        else:
            unit += ch
            idx += 1

    if len(unit) > 0:
        expr_array.append(unit)

    return expr_array

def get_value(expr):
    '''
        Input
            (array) expr - an expression array generated by the parse method

        Returns a tuple of (conversion, units), where:
            - (float) conversion is the multiplication factor to convert units to SI
            - (array) units is an expression array matching the input expr
    '''
    print "-"*30
    print "expr: {}".format(expr)
    if type(expr) == str:
        return convert_to_si(expr)
    elif type(expr) == list:
        div = lambda x, y: x/y
        mult = lambda x, y: x*y

        l_operand = get_value(expr[0])
        units = [l_operand[1]]
        conversion = l_operand[0]

        print "l_val: {}".format(l_operand)
        for i in xrange(1, len(expr)-1, 2):
            op = expr[i]
            r_operand = get_value(expr[i+1])
            print "i: {}".format(i)
            print "op: {}".format(op)
            print "r_val: {}".format(r_operand)
            print "before_val: {}".format(conversion)
            

            if op == '/':
                units.append('/')
                units.append(r_operand[1])
                conversion = div(conversion, r_operand[0])
            elif op == '*':
                units.append('*')
                units.append(r_operand[1])
                conversion = mult(conversion, r_operand[0])
            else:
                raise RuntimeError("Unknown operation: {}".format(op))
            
            print "units: {}".format(units)
            print "after_val: {}".format(conversion)
    else:
        raise RuntimeError('Cannot determine value of {}'.format(expr))

    return (conversion, units)

si_conversion = {
    'minute': (60.0, 's'),
    'min': (60.0, 's'),
    'hour': (3600.0, 's'),
    'h': (3600.0, 's'),
    'day': (86400.0, 's'),
    'd': (86400.0, 's'),
    'degree': (math.pi/180.0, 'rad'),
    'Â°': (math.pi/180.0, 'rad'),
    "'": (math.pi/180.0, 'rad'),
    'second': (math.pi/648000.0, 'rad'),
    '"': (math.pi/648000.0, 'rad'),
    'hectare': (10000.0, 'm2'),
    'ha': (10000.0, 'm2'),
    'litre': (.001, 'm3'),
    'L': (.001, 'm3'),
    'tonne': (10000.0, 'kg'),
    't': (10000.0, 'kg')
}
def convert_to_si(base_unit):
    '''
        Input
            (str) base_unit - a non-SI unit

        Returns a tuple of (conversion, units), where:
            - (float) conversion is the multiplication factor to convert units to SI
            - (array) units is an expression array matching the input expr
        Really just lookup table
    '''
    return si_conversion[base_unit]


def stringify_expr(expr):
    '''
        Input
            (array) expr - an expression array following the layout from parse

        Returns a string of the expr flattened
    '''
    s = ''
    for entry in expr:
        if type(entry) == str:
            s += entry
        elif type(entry) == list:
            s += '(' + stringify_expr(entry) + ')'
        else:
            raise RuntimeError("Unable to stringify element: {}".format(entry))
    return s


if __name__ == '__main__':
    e = parse('(degree/minute)*minute*h')
    # e = parse('a/(b*c)')
    print e
    v = get_value(e)
    print "final value: {}".format(v)
    print "final string: {}".format(stringify_expr(v[1]))